import subprocess
import time

# Configuration parameters
config = {}
config['WIRELESS_ADAPTER'] = ''  # Placeholder for the wireless adapter in the configuration

# Attack parameters
attack_params = {}
attack_params['WIRELESS_ADAPTER'] = ''  # Placeholder for the selected wireless adapter
attack_params['HOST_MAC_ADDRESS'] = ''  # Placeholder for the host MAC address
attack_params['WIRELESS_ADAPTER_MON'] = ''  # Placeholder for the wireless adapter in monitor mode

# Get List of Network Adapters
print('Fetching Wireless Network Adapters on Device..')

# Placeholder for storing wireless adapters
all_wireless_adapters = []

# Placeholder for wireless data
wireless_data = ''

# Use subprocess to execute a system command and capture the output
with subprocess.Popen(['iwconfig'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as data:
    wireless_data, err = data.communicate()

# Decode the bytes to string and split the lines
wireless_data = wireless_data.decode('utf-8').split('\n')

# Iterate through the lines to extract wireless adapter names
for line in wireless_data:
    if not line.startswith(' ') and 'IEEE' in line:
        all_wireless_adapters.append(line.split(' ')[0])

# Count the number of wireless adapters found
all_wireless_adapters_num = len(all_wireless_adapters)
print('Number of Wireless Adapters Found:', all_wireless_adapters_num)
print('Wireless Adapter names', all_wireless_adapters)

# Check if wireless adapters are found
if all_wireless_adapters_num <= 0:
    print("No Wireless Network Adapters found. Please recheck the adapters and run..")
    print('Exiting the process')
    exit()
print('\n\n')

# Select Network Adapter
if config['WIRELESS_ADAPTER'] != '':
    if config['WIRELESS_ADAPTER'] in all_wireless_adapters:
        attack_params['WIRELESS_ADAPTER'] = config['WIRELESS_ADAPTER']
    else:
        print('Wireless Adapter mentioned in the Config file is not present in detected adapters.')
else:
    print("Wireless Network Adapters Identified:")
    for i in range(all_wireless_adapters_num):
        print(i + 1, all_wireless_adapters[i])
    while True:
        choice = 'XY'
        try:
            choices = [x + 1 for x in range(all_wireless_adapters_num)]
            print('Choose Wireless Adapter in ', choices, ':')
            choice = int(input())
            if choice in choices:
                attack_params['WIRELESS_ADAPTER'] = all_wireless_adapters[i - 1]
                break
            else:
                print('Sorry. The Wireless Adapter with id', choice, 'is not found.')
        except ValueError as ve:
            print('Expect an Integer. Select from the Identified Wireless Network Adapters')
            ve
print('Wireless Adapter Selected:', attack_params['WIRELESS_ADAPTER'])

# Bring Adapter down
adapter_data = None
with subprocess.Popen(['ifconfig', attack_params['WIRELESS_ADAPTER'], 'down'],
                      stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as data:
    adapter_data = data.communicate()

# Check for conditions and print messages accordingly
if adapter_data[0] is not None and len(adapter_data[0]) > 0:
    print('Unhandled Condition occurred for ifconfig - stdout:', adapter_data[0])
    print('Exiting the process')
    exit()
if adapter_data[1] is not None and len(adapter_data[1]) > 0:
    print('Unhandled Condition occurred for ifconfig - stderr:', adapter_data[1])
    print('Exiting the process')
    exit()
print('Successfully brought the wireless adapter down:', attack_params['WIRELESS_ADAPTER'])
print('\n\n\n')

# Change Mac Address
print('Changing Mac Address using macchanger')
mac_data = None
with subprocess.Popen(['macchanger', '-r', attack_params['WIRELESS_ADAPTER']],
                      stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as data:
    mac_data = data.communicate()

# Decode and split the mac data
mac_data_ = mac_data[0]
mac_data__ = mac_data[1]
if mac_data__ is not None:
    print('Unhandled Condition occurred for ifconfig - stdout:', mac_data__)
    exit()
mac_data_ = mac_data_.decode('utf-8').split('\\n')

# Print the Mac Address change information
for line in mac_data_:
    print(line)

print('\n\n\n')

# Bring Adapter up
adapter_data = None
with subprocess.Popen(['ifconfig', attack_params['WIRELESS_ADAPTER'], 'up'],
                      stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as data:
    adapter_data = data.communicate()

# Check for conditions and print messages accordingly
if adapter_data[0] is not None and len(adapter_data[0]) > 0:
    print('Unhandled Condition occurred for ifconfig - stdout:', adapter_data[0])
    print('Exiting the process')
    exit()
if adapter_data[1] is not None and len(adapter_data[1]) > 0:
    print('Unhandled Condition occurred for ifconfig - stderr:', adapter_data[1])
    print('Exiting the process')
    exit()
print('Successfully brought the wireless adapter up:', attack_params['WIRELESS_ADAPTER'])
print('\n\n\n')

# Enable Monitor mode on Network Adapter
monitor_data = None
with subprocess.Popen(['airmon-ng', 'start', attack_params['WIRELESS_ADAPTER']],
                      stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as data:
    monitor_data = data.communicate()

# Decode the monitor data and extract the wireless adapter in monitor mode
monitor_data_out = monitor_data[0].decode('utf-8')
if 'monitor mode vif enabled' in monitor_data_out:
    for line in monitor_data_out.split('\\n'):
        if 'monitor mode vif enabled' in line:
            attack_params['WIRELESS_ADAPTER_MON'] = line.split(']')[-1][:-1]
else:
    print('Unhandled Condition occurred for airmon-ng:', monitor_data[1])
    exit()

# Check for conditions and print messages accordingly
if monitor_data[1] is not None and len(monitor_data[1]) > 0:
    print('Unhandled Condition occurred for ifconfig - stderr:', monitor_data[1])
    print('Exiting the process')
    exit()
print('Monitor Mode enabled successfully for ',
      attack_params['WIRELESS_ADAPTER'],
      'as',
      attack_params['WIRELESS_ADAPTER_MON'])
print('\n\n\n')



# scan for wireless access points

# display devices connected to access points. - possibility of successful attack

# collect packets from specific access point till EAPOL capture, then close monitoring

# Disable Monitor mode on Network Adapter
'''
monitor_data=None
with subprocess.Popen(['airmon-ng','stop',attack_params['WIRELESS_ADAPTER']], stdout = subprocess.PIPE, stderr = subprocess.STDOUT) as data:
    monitor_data =data.communicate()

monitor_data_out = monitor_data[0].split('\\n')
for line in monitor_data_out:
    print(line)

if monitor_data[1] is not None:
    if len(monitor_data[1])>0:
        print('Unhandled Condition occured for ifconfig - stderr:',monitor_data[1])
        print('exiting the process')
        exit()
print('Successfully Enabled monitor mode for wireless adapter:', attack_params['WIRELESS_ADAPTER'])
print('\n\n\n')





















# Bring Adapter down
adapter_data=None
with subprocess.Popen(['ifconfig',attack_params['WIRELESS_ADAPTER'],'down'], stdout = subprocess.PIPE, stderr = subprocess.STDOUT) as data:
    adapter_data =data.communicate()
    
if adapter_data[0] is not None:
    if len(adapter_data[0])>0:
        print('Unhandled Condition occured for ifconfig - stdout:',adapter_data[0])
        print('exiting the process')
        exit()
if adapter_data[1] is not None:
    if len(adapter_data[1])>0:
        print('Unhandled Condition occured for ifconfig - stderr:',adapter_data[1])
        print('exiting the process')
        exit()
print('Successfully brought the wireless adapter down:', attack_params['WIRELESS_ADAPTER'])
print('\n\n\n')



# Change Mac Address
print('Changing Mac Address using macchanger')
mac_data=None
with subprocess.Popen(['macchanger','-p',attack_params['WIRELESS_ADAPTER']], stdout = subprocess.PIPE, stderr = subprocess.STDOUT) as data:
    mac_data =data.communicate()

mac_data_ = mac_data[0]
mac_data__ = mac_data[1]
if mac_data__ is not None:
    print('Unhandled Condition occured for ifconfig - stdout:',mac_data__)
    exit()
mac_data_=mac_data_.decode('utf-8').split('\\n')
for line in mac_data_:
    print(line)

print('\n\n\n')


# Bring Adapter up
adapter_data=None
with subprocess.Popen(['ifconfig',attack_params['WIRELESS_ADAPTER'],'up'], stdout = subprocess.PIPE, stderr = subprocess.STDOUT) as data:
    adapter_data =data.communicate()
    
if adapter_data[0] is not None:
    if len(adapter_data[0])>0:
        print('Unhandled Condition occured for ifconfig - stdout:',adapter_data[0])
        print('exiting the process')
        exit()
if adapter_data[1] is not None:
    if len(adapter_data[1])>0:
        print('Unhandled Condition occured for ifconfig - stderr:',adapter_data[1])
        print('exiting the process')
        exit()
print('Successfully brought the wireless adapter up:', attack_params['WIRELESS_ADAPTER'])
print('\n\n\n')

# start bruteforcing.
'''
